import { TypeDecorator } from '../../decorators/types/type-decorator';
import { Model } from '../../decorators';
import { DecoApi } from '../../helpers/deco-api';
export declare class DecoField {
    element: HTMLElement;
    private decoApi;
    instance: Model;
    property: string;
    type: string;
    autohint: boolean;
    variant: string;
    displayRefLocale: boolean;
    refLocale: string;
    placeholder: string;
    textarea: any;
    outline: boolean;
    labelPosition: 'floating' | 'placeholder' | 'label';
    disabled: boolean;
    dicoContext: string;
    canRemoveBg: boolean;
    fetchAllModels: boolean;
    modelsList: Array<Model> | null;
    label: string;
    hint: string;
    typeDecorator: TypeDecorator;
    options: any;
    selectOptions: Array<any>;
    _type: string;
    private _refLocale;
    constructor(element: HTMLElement, decoApi: DecoApi);
    bind(): void;
    instanceChanged(): void;
    propertyChanged(): void;
    refLocaleChanged(): void;
    initField(): void;
    processProperty(): void;
    processType(): void;
    setRefLocale(): void;
    firstLetterUpper(text: string): string;
    context(): string;
}
