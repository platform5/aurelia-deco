import { ProfileModel } from './../models/profile.model';
import { UserModel } from './../models/user.model';
import { SdLogin } from './sd-login';
import { EventAggregator } from 'aurelia-event-aggregator';
import { Router } from 'aurelia-router';
import { I18N } from 'aurelia-i18n';
import { SwissdataApi } from './swissdata-api';
import { Container } from 'aurelia-dependency-injection';
import { Logger } from 'aurelia-logging';
import { IpStackResponse, EnsureModel, Model } from '../deco';
import { AppState } from '../state/interfaces';
import { SentryHelper } from 'aurelia-resources';
export interface BootstrapConfig {
    container?: Container;
    enableStateLog?: boolean;
    enableStateStorage?: boolean;
    stateStorageKey?: string;
    enableRestoringRouteFromState?: boolean;
    restoreRouteFromStateOnlyFor?: Array<string>;
    enableStateVersionning?: boolean;
    stateVersion?: string;
    initialState?: any;
    useDynamicModels?: boolean;
    enableIpStackAutoDetect?: boolean;
    dynamicModelSlugsForAutoLoading?: Array<string>;
    language?: string;
    languages?: Array<string>;
    country?: string;
    countries?: Array<string>;
}
export declare class SwissdataGlobal {
    eventAggregator: EventAggregator;
    router: Router;
    i18n: I18N;
    swissdataApi: SwissdataApi;
    ready: boolean;
    log: Logger;
    state: AppState;
    sdLogin: SdLogin;
    sentry: SentryHelper;
    ipStackResponse?: IpStackResponse;
    config: BootstrapConfig;
    private stateSubscription;
    private stateLanguageSubscription;
    container: Container;
    ensureUsers: EnsureModel<typeof UserModel>;
    ensureProfiles: EnsureModel<typeof ProfileModel>;
    constructor();
    bootstrap(config: BootstrapConfig): Promise<any>;
    start(): Promise<any>;
    beforeEnsuringAuthentication(): Promise<any>;
    afterEnsuringAuthentication(): Promise<any>;
    onAnyLoad(): Promise<any>;
    onAuthenticatedLoad(): Promise<any>;
    onUnauthenticatedLoad(): Promise<any>;
    onLogin(): Promise<any>;
    onLogout(): Promise<any>;
    isReady(): Promise<void>;
    registerActions(): void;
    publish(event: any, data?: any): void;
    subscribe(event: any, callback: Function): import("aurelia-event-aggregator").Subscription;
    subscribeOnce(event: any, callback: Function): import("aurelia-event-aggregator").Subscription;
    navigateToRoute(route: string, params?: any, options?: any): boolean;
    navigate(fragment: string, options?: any): boolean;
    getLocale(): string;
    popError(event: any): void;
    info(message: string, ...rest: any[]): void;
    debug(message: string, ...rest: any[]): void;
    error(message: string, ...rest: any[]): void;
    warn(message: string, ...rest: any[]): void;
    listenToRouteAndSaveInState(): void;
    restoreRouteFromState(state: AppState, onlyOnSpecificRouteNames?: Array<string>): Promise<any>;
    private getCurrentRouteASAP;
    imageSrc(modelRoute: 'string', fieldname: 'string', previewFormat?: string | null): string;
    updateAllModelsFromApi(ignoreError?: boolean): Promise<any>;
    updateModelsFromApi(modelName: string, ignoreError?: boolean): Promise<any>;
    lastUpdateText(instance: Model): Promise<string>;
}
