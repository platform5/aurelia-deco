import { EventAggregator, Subscription } from 'aurelia-event-aggregator';
import { StyleEngine, UxComponent } from '@aurelia-ux/core';
import { SwissdataLoginTheme } from './swissdata-login-theme';
import { SwissdataApi } from '../../helpers/swissdata-api';
import { UserModel } from '../../models/user.model';
export declare class SwissdataLogin implements UxComponent {
    element: HTMLElement;
    private styleEngine;
    private eventAggregator;
    private swissdataApi;
    private forgotPasswordValidationController;
    theme: SwissdataLoginTheme;
    step: 'login' | 'double-auth' | 'create-account' | 'validate-account' | 'account-created' | 'forgot-password' | 'reset-password';
    requireEmail: boolean;
    requireMobile: boolean;
    processing: boolean;
    loginInput: string;
    loginPassword: string;
    doubleAuthCode: string;
    newAccountInstance: UserModel;
    createAccountPassword: string;
    createAccountMobile: string;
    createAccountValidation: 'emailOrMobile' | 'emailAndMobile' | 'emailOnly' | 'mobileOnly' | 'none';
    private countryCode;
    private countryPrefix;
    private phonePlaceholder;
    private countries;
    private countrySelectorOpened;
    private countrySearchTerm;
    validateEmailCode: string;
    validateMobileCode: string;
    emailValidated: boolean;
    mobileValidated: boolean;
    forgotPasswordEmail: string;
    forgotPasswordMobileInput: string;
    forgotPasswordMobile: string;
    resetPasswordToken: string;
    resetPasswordCode: string;
    resetPasswordNewPassword: string;
    subscription: Subscription;
    private log;
    constructor(element: HTMLElement, styleEngine: StyleEngine, eventAggregator: EventAggregator, swissdataApi: SwissdataApi, forgotPasswordValidationController: any);
    bind(): void;
    attached(): void;
    detached(): void;
    themeChanged(newValue: any): void;
    startCreateAccount(): void;
    startForgotPassword(): void;
    stepChanged(): Promise<void>;
    focusLoginField(): void;
    resetStep(): void;
    backToLogin(): void;
    fixInputs(): void;
    login(): void;
    doubleAuth(): void;
    loginOk(): void;
    createAccount(): void;
    saveNewAccountInstanceInState(): Promise<void>;
    get countryCodeFlag(): string;
    selectCountry(country: any): void;
    closeCountrySelector(): boolean;
    saveNewAccountPhoneInState(): void;
    validateEmail(): any;
    validateMobile(): any;
    resendCode(method: 'email' | 'mobile'): Promise<void>;
    processValidationResponse(response: any): void;
    skipSecondValidation(): void;
    goToAccountCreatedScreen(): Promise<void>;
    requestResetPassword(): void;
    forgotPasswordEmailChanged(): void;
    forgotPasswordMobileInputChanged(): void;
    stopForgotPassword(): void;
    resetPassword(): void;
}
export declare class FilterCountriesValueConverter {
    toView(list: Array<any>, term: string): any[];
}
